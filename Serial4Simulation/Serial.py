#!/usr/bin/env python
# -*- coding:utf-8 -*- 


##############################################################################
## license :
##============================================================================
##
## File :        Serial.py
## 
## Project :     Serial4Simulation
##
## This file is part of Tango device class.
## 
## Tango is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
## 
## Tango is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with Tango.  If not, see <http://www.gnu.org/licenses/>.
## 
##
## $Author :      sblanch$
##
## $Revision :    $
##
## $Date :        $
##
## $HeadUrl :     $
##============================================================================
##            This file is generated by POGO
##    (Program Obviously used to Generate tango Object)
##
##        (c) - Software Engineering Group - ESRF
##############################################################################

"""This device has been developed to prepare a testbench for Danfysik 9100 device server."""

__all__ = ["Serial", "SerialClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(Serial.additionnal_import) ENABLED START -----#
CURRENT_SLEWRATE_AD = 1
CURRENT_SLEWRATE_DA = 1
VOLTAGE_READBACK_AD = 2
CURRENT_READBACK_AD = 8
CURRENT_SETPOINT_AD = 19
CURRENT_SETPOINT_DA = 0
TEMPERATURE = 1

# ps internal status positions in the string, being 1 the leftest and 24 the rightest
mainPowerOff     =  1 #'!'=OFF,'.'=ON
polarityNormal   =  2
polatityReversed =  3
#4 not used, always '.'
crowbarOn          =  5 #'!'=ON,'.'=OFF
iMode              =  6 #'!'=i-mode,'.'=v-mode
unitMode           =  7 #'!'=%,'.'=Amps % Volts
externalInterlock0 =  8 #'!'=interlock,'.'=no interlock
#9 not used, always '.'
sumInterlock       = 10 #'!'=sum interlock,'.'=no sum interlock
overVoltage        = 11 #'!'=over voltage,'.'=not over voltage
dcOverCurrent      = 12 #'!'=over current,'.'=not over current
dcUnderVoltage     = 13 #'!'=fault,'.'=ok
#14 not used, always '.'
phaseFaliure       = 15 #'!'=fault,'.'=ok
#16 not used, always '.'
earthLeakage       = 17 #'!'=fault,'.'=ok
fan                = 18 #'!'=fault,'.'=ok
mpsEverTemperature = 19 #'!'=fault,'.'=ok
externalInterlock1 = 20 #'!'=interlock,'.'=no interlock
externalInterlock2 = 21 #'!'=interlock,'.'=no interlock
externalInterlock3 = 22 #'!'=interlock,'.'=no interlock
mpsNotReady        = 23 #'!'=not ready,'.'=ready
#24 not used, always '.'
#----- PROTECTED REGION END -----#	//	Serial.additionnal_import

## Device States Description
## No states for this device

class Serial (PyTango.Device_4Impl):

    #--------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(Serial.global_variables) ENABLED START -----#
    def __internalStatus(self,arg1='NaN',arg2='NaN'):
        #---- TODO: Some attributes are necessary to simulate errors and interlocks
        return self.__stateString
    def __errorString(self,arg1=None,arg2=None):
        #---- TODO: Not implemented yet
        return None
    def __readAD(self,channel,value=None):
        try:
            channel = int(channel)
            return str(self.ADCChannels[channel])
        except:
            return None
    def __readwriteDA(self,channel,value=None):
        try:
            channel = int(channel)
            #first translate from DA to AD numbers
            if channel == CURRENT_SETPOINT_DA:
                channel = CURRENT_SETPOINT_AD
            elif channel == CURRENT_SLEWRATE_DA:
                channel = CURRENT_SLEWRATE_AD
            else:
                self.error_stream("Could not understand the DA register")
                return None
            #area to distinguish between read and write
            if value == None:
                return str(' %d'%self.ADCChannels[channel])
            else:
                self.ADCChannels[channel] = int(value)
        except Exception,e:
            self.error_stream("Exception on DA: %s"%e)
            return None
#    def __writeValue(self,channel,value):
#        try:
#            channel = int(channel)
#            if value == None:
#                return self.__readValue(channel,None)
#            value = int(value)
#            self.ADCChannels[channel]=value
#        except:
#            pass
#        return None
    def __off(self,arg1=None,arg2=None):
        #---- FIXME: with this is enough?
        self.__setStateStringFlag(mainPowerOff,'!')
        return None
    def __on(self,arg1=None,arg2=None):
        #---- FIXME: with this is enough?
        self.__setStateStringFlag(mainPowerOff,'.')
        return None
    def __reset(self,arg1=None,arg2=None):
        #---- FIXME: with this is enough?
        self.__stateString = "."*24
        self.__setStateStringFlag(mainPowerOff,'!')
        self.__setStateStringFlag(polatityReversed,'!')
        #self.__setStateStringFlag(crowbarOn,'!')
        self.__setStateStringFlag(iMode,'!')
        return None
    def __getRemoteMode(self,arg1=None,arg2=None):
        return self.__remote
    def __setRemoteMode(self,arg1=None,arg2=None):
        self.__remote = "REM"
    def __setLocalMode(self,arg1=None,arg2=None):
        self.__remote = "LOC"
    def __setStateStringFlag(self,position,value):
        self.__stateString = self.__stateString[:position-1] \
                             + value \
                             + self.__stateString[position:]
    #----- PROTECTED REGION END -----#	//	Serial.global_variables

    def __init__(self,cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        Serial.init_device(self)
        #----- PROTECTED REGION ID(Serial.__init__) ENABLED START -----#
        self.ADCChannels = {CURRENT_SLEWRATE_AD:5,
                            VOLTAGE_READBACK_AD:0,
                            CURRENT_READBACK_AD:0,
                            CURRENT_SETPOINT_AD:0,
                            TEMPERATURE:0}
        self.__stateString = "."*24
        self.__setStateStringFlag(mainPowerOff,'!')
        self.__setStateStringFlag(polatityReversed,'!')
        #self.__setStateStringFlag(crowbarOn,'!')
        self.__setStateStringFlag(iMode,'!')
        self.__remote = "REM"
        self._answer = ""
        #----- PROTECTED REGION END -----#	//	Serial.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(Serial.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Serial.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_SimulateSerialFail_read = False
        #----- PROTECTED REGION ID(Serial.init_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Serial.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(Serial.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Serial.always_executed_hook

    #-----------------------------------------------------------------------------
    #    Serial read/write attribute methods
    #-----------------------------------------------------------------------------
    
    def read_SimulateSerialFail(self, attr):
        self.debug_stream("In read_SimulateSerialFail()")
        #----- PROTECTED REGION ID(Serial.SimulateSerialFail_read) ENABLED START -----#
        attr.set_value(self.attr_SimulateSerialFail_read)
        #----- PROTECTED REGION END -----#	//	Serial.SimulateSerialFail_read
        
    def write_SimulateSerialFail(self, attr):
        self.debug_stream("In write_SimulateSerialFail()")
        data=attr.get_write_value()
        #----- PROTECTED REGION ID(Serial.SimulateSerialFail_write) ENABLED START -----#
        self.attr_SimulateSerialFail_read = data
        #----- PROTECTED REGION END -----#	//	Serial.SimulateSerialFail_write
        
    
    
        #----- PROTECTED REGION ID(Serial.initialize_dynamic_attributes) ENABLED START -----#
    def initialize_dynamic_attributes(self):
        pass
        #----- PROTECTED REGION END -----#	//	Serial.initialize_dynamic_attributes
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(Serial.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Serial.read_attr_hardware


    #-----------------------------------------------------------------------------
    #    Serial command methods
    #-----------------------------------------------------------------------------
    
    def DevSerFlush(self, argin):
        """ 
        
        :param argin: flush to do 0=input 1=output 2=both
        :type: PyTango.DevLong
        :return: 
        :rtype: PyTango.DevVoid """
        self.debug_stream("In DevSerFlush()")
        #----- PROTECTED REGION ID(Serial.DevSerFlush) ENABLED START -----#
        #---- There is nothing to do if the operations are not enqueued.
        #----- PROTECTED REGION END -----#	//	Serial.DevSerFlush
        
    def DevSerreadRaw(self):
        """ 
        
        :param : 
        :type: PyTango.DevVoid
        :return: pointer to the string read updated
        :rtype: PyTango.DevString """
        self.debug_stream("In DevSerreadRaw()")
        argout = ''
        #----- PROTECTED REGION ID(Serial.DevSerreadRaw) ENABLED START -----#
        argout = self._answer
        self._answer = ""
        self.debug_stream("In DevSerreadRaw() sending %s"%repr(argout))
        #----- PROTECTED REGION END -----#	//	Serial.DevSerreadRaw
        return argout
        
    def DevSerWriteString(self, argin):
        """ 
        
        :param argin: String to write
        :type: PyTango.DevString
        :return: Number of characters written
        :rtype: PyTango.DevLong """
        self.debug_stream("In DevSerWriteString()")
        argout = 0
        #----- PROTECTED REGION ID(Serial.DevSerWriteString) ENABLED START -----#
        self.debug_stream("In DevSerWriteString() received %s"%repr(argin))
        argout = len(argin)
        #---- This answer build can be out of this call
        cmd = argin.split('\r')[0].split(' ')
        while len(cmd) < 3: cmd.append(None)
        self._answer = {'S1':self.__internalStatus,
                        'ERRT':self.__errorString,
                        'AD':self.__readAD,
                        'DA':self.__readwriteDA,
                        'F':self.__off,
                        'N':self.__on,
                        'RS':self.__reset,
                        'CMD':self.__getRemoteMode,
                        'REM':self.__setRemoteMode,
                        'LOC':self.__setLocalMode
        }[cmd[0]](cmd[1],cmd[2])
        if self._answer == None: self._answer = ""
        self._answer = self._answer + "\n\r"
        #----TODO: else "syntax error"
        #----- PROTECTED REGION END -----#	//	Serial.DevSerWriteString
        return argout
        

class SerialClass(PyTango.DeviceClass):
    #--------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(Serial.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	Serial.global_class_variables

    def dyn_attr(self, dev_list):
        """Invoked to create dynamic attributes for the given devices.
        Default implementation calls
        :meth:`Serial.initialize_dynamic_attributes` for each device
    
        :param dev_list: list of devices
        :type dev_list: :class:`PyTango.DeviceImpl`"""
    
        for dev in dev_list:
            try:
                dev.initialize_dynamic_attributes()
            except:
                import traceback
                dev.warn_stream("Failed to initialize dynamic attributes")
                dev.debug_stream("Details: " + traceback.format_exc())
        #----- PROTECTED REGION ID(Serial.dyn_attr) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Serial.dyn_attr

    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        }


    #    Command definitions
    cmd_list = {
        'DevSerFlush':
            [[PyTango.DevLong, "flush to do 0=input 1=output 2=both"],
            [PyTango.DevVoid, "none"]],
        'DevSerreadRaw':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevString, "pointer to the string read updated"]],
        'DevSerWriteString':
            [[PyTango.DevString, "String to write"],
            [PyTango.DevLong, "Number of characters written"]],
        }


    #    Attribute definitions
    attr_list = {
        'SimulateSerialFail':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(SerialClass,Serial,'Serial')

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed,e:
        print '-------> Received a DevFailed exception:',e
    except Exception,e:
        print '-------> An unforeseen exception occured....',e

if __name__ == '__main__':
    main()
