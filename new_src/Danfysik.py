#!/usr/bin/env python
# -*- coding:utf-8 -*- 


##############################################################################
## license :
##============================================================================
##
## File :        Danfysik.py
## 
## Project :     TANGO Device Server
##
## This file is part of Tango device class.
## 
## Tango is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
## 
## Tango is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with Tango.  If not, see <http://www.gnu.org/licenses/>.
## 
##
## $Author :      sblanch$
##
## $Revision :    $
##
## $Date :        $
##
## $HeadUrl :     $
##============================================================================
##            This file is generated by POGO
##    (Program Obviously used to Generate tango Object)
##
##        (c) - Software Engineering Group - ESRF
##############################################################################

"""The tailor is rich and my mother is in the kitchen."""

__all__ = ["Danfysik", "DanfysikClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(Danfysik.additionnal_import) ENABLED START -----#
import traceback, time
import threading
import state

VOLTAGE_READBACK_REGISTER_AD = 2
VOLTAGE_READBACK_FACTOR = 10

CURRENT_READBACK_REGISTER_AD = 8
CURRENT_READBACK_FACTOR = 100

CURRENT_SETPOINT_REGISTER_AD = 19
CURRENT_SETPOINT_FACTOR = 1000

AMBIENT_TEMPERATURE_REGISTER_AD = 1
AMBIENT_TEMPERATURE_FACTOR = 1
#----- PROTECTED REGION END -----#	//	Danfysik.additionnal_import

## Device States Description
## ALARM : Something is not going well, status advice to fix it
## FAULT : Something went wrong, status tells reasons and recover by Init()
## INIT : Initializint, power supply not yet available
## MOVING : The current is changing
## OFF : Communication with the power supply done, no current in the output
## ON : The power supply have current in the output

class Danfysik (PyTango.Device_4Impl):

    #--------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(Danfysik.global_variables) ENABLED START -----#
    _important_logs = []
    dp = None
    statusDict = state.DanfysikStatusDict
    
    #----# Events & stat{e,us} auxiliar methods
    def changeState(self,newstate):
        self.debug_stream("In %s::changeState(%s)"%(self.get_name(),str(newstate)))
        self.set_state(newstate)
        self.addStatusMsg("")
        self.push_change_event('State',newstate)
    def fireEventsList(self,eventsAttrList):
        timestamp = time.time()
        for attrEvent in eventsAttrList:
            try:
                self.debug_stream("In %s::fireEventsList() attribute: %s"%(self.get_name(),attrEvent[0]))
                if len(attrEvent) == 3:#specifies quality
                    self.push_change_event(attrEvent[0],attrEvent[1],timestamp,attrEvent[2])
                else:
                    self.push_change_event(attrEvent[0],attrEvent[1],timestamp,PyTango.AttrQuality.ATTR_VALID)
            except Exception,e:
                self.error_stream("In %s::fireEventsList() Exception with attribute %s"%(self.get_name(),attrEvent[0]))
                print e
    #@todo: clean the important logs when they loose importance.
    def cleanAllImportantLogs(self):
        self.debug_stream("In %s::cleanAllImportantLogs()"%self.get_name())
        self._important_logs = []
        self.addStatusMsg("")
    def addStatusMsg(self,current=None,important = False):
        try:
            self.debug_stream("In %s::addStatusMsg()"%self.get_name())
            msg = "The device is in %s state.\n"%(self.get_state())
            for ilog in self._important_logs:
                msg = "%s%s\n"%(msg,ilog)
            if not current == None:
                status = "%s%s\n"%(msg,current)
            self.set_status(status)
            self.push_change_event('Status',status)
            if important and not current in self._important_logs:
                self._important_logs.append(current)
        except Exception,e:
            self.error_stream("Exception adding status message: %s"%(e))
    #---- Done events & stat{e,us} auxiliar methods
    
    #----# Serial line auxiliar methods
    def _linkSerial(self):
        self.debug_stream("In _linkSerial()")
        try:
            if self.dp == None:
                self.dp = PyTango.DeviceProxy(self.SerialLine)
            self.dp.DevSerWriteString('S1\r')
            self.waiting=threading.Event()
            self.waiting.wait(0.1)
            if not self.dp == None:
                self.statusString = self.dp.DevSerReadRaw().strip('\n\r')
                if len(self.statusString) > 0:
                    if self.statusString[0] == '':
                        self.changeState(PyTango.DevState.FAULT)
                        self.cleanAllImportantLogs()
                        self.addStatusMsg("Serial line is not responding",True)
                    elif self.statusString[0] == '!':
                        self.changeState(PyTango.DevState.OFF)
                    else:
                        self.changeState(PyTango.DevState.ON)
                        self.dp.DevSerWriteString('ERRT\r')
                        self.dp.DevSerFlush(2)
                        self.cleanAllImportantLogs()
                else:
                    self.changeState(PyTango.DevState.FAULT)
                    self.cleanAllImportantLogs()
                    self.addStatusMsg("Cannot link with serial line",True)
        except Exception,e:
            self.dp = None
            self.changeState(PyTango.DevState.FAULT)
            self.cleanAllImportantLogs()
            msg = "Exception when try to link with serial line"
            self.addStatusMsg(msg,True)
            self.debug_stream(msg+": %s"%(e))
            traceback.format_exc()
    def isRemoteMode(self):
        self.dp.DevSerWriteString('CMD\r')
        self.waiting=threading.Event()
        self.waiting.wait(0.1) 
        res = self.dp.DevSerReadRaw().strip('\n\r')
        if not self._IsAnswerError(res):
            if res=='REM ': return True
            else: return False
        else: return None
    def _IsAnswerError(self,answer):
        if answer == '':
            self.warn_stream('Void answer from the Power Converter')
            return True
        if answer.startswith('?/x07'):
            error = res.split(' ',1)[1]
            self.error_stream('Power Converter say: %s'%(error))
            return True
        return False
    #---- Done serial line auxiliar methods
    #----- PROTECTED REGION END -----#	//	Danfysik.global_variables

    def __init__(self,cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        Danfysik.init_device(self)
        #----- PROTECTED REGION ID(Danfysik.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Danfysik.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(Danfysik.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Danfysik.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_Current_read = 0.0
        self.attr_CurrentSetpoint_read = 0.0
        self.attr_Voltage_read = 0.0
        self.attr_CurrentSlewrate_read = 0.0
        self.attr_AmbientTemperature_read = 0.0
        self.attr_StateCode64_read = 0
        self.attr_RemoteMode_read = False
        self.attr_Errors_read = ['']
        #----- PROTECTED REGION ID(Danfysik.init_device) ENABLED START -----#
        self.changeState(PyTango.DevState.INIT)
        self.cleanAllImportantLogs()
        #self.info_stream("Serial lines is %s(%s)"%(type(self.SerialLine),self.SerialLine))
        self._linkSerial()
        self.attr_CurrentSetpoint_write = self.attr_CurrentSetpoint_read
        self.attr_CurrentSlewrate_write = self.attr_CurrentSlewrate_read
        self.attr_RemoteMode_write = self.attr_RemoteMode_read
#        self.set_change_event('Current', True, False)
#        self.set_change_event('Voltage', True, False)
        self.set_change_event('RemoteMode', True, False)
        self.set_change_event('Errors', True, False)
        #----- PROTECTED REGION END -----#	//	Danfysik.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(Danfysik.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Danfysik.always_executed_hook

    #-----------------------------------------------------------------------------
    #    Danfysik read/write attribute methods
    #-----------------------------------------------------------------------------
    
    def read_Current(self, attr):
        self.debug_stream("In read_Current()")
        #----- PROTECTED REGION ID(Danfysik.Current_read) ENABLED START -----#
        self.dp.DevSerWriteString('AD %d\r'%CURRENT_READBACK_REGISTER_AD)
        self.waiting=threading.Event()
        self.waiting.wait(0.1) 
        res = self.dp.DevSerReadRaw().strip('\n\r')
        if not self._IsAnswerError(res):
            self.attr_Current_read = float(res)/CURRENT_READBACK_FACTOR
            attr.set_value(self.attr_Current_read)
        else:
            attr.set_quality(PyTango.AttrQuality.ATTR_INVALID)
        #----- PROTECTED REGION END -----#	//	Danfysik.Current_read
        
    def is_Current_allowed(self, attr):
        self.debug_stream("In is_Current_allowed()")
        state_ok = not(self.get_state() in [PyTango.DevState.INIT])
        #----- PROTECTED REGION ID(Danfysik.is_Current_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Danfysik.is_Current_allowed
        return state_ok
        
    def read_CurrentSetpoint(self, attr):
        self.debug_stream("In read_CurrentSetpoint()")
        #----- PROTECTED REGION ID(Danfysik.CurrentSetpoint_read) ENABLED START -----#
        #self.dp.DevSerWriteString('RA\r')
        self.dp.DevSerWriteString('AD %d\r'%CURRENT_SETPOINT_REGISTER_AD)
        self.waiting=threading.Event()
        self.waiting.wait(0.1) 
        res = self.dp.DevSerReadRaw().strip('\n\r')
        if not self._IsAnswerError(res):
            self.attr_CurrentSetpoint_read = int(res)
            self.attr_CurrentSetpoint_read = float(self.attr_CurrentSetpoint_read)/CURRENT_SETPOINT_FACTOR
            attr.set_value(self.attr_CurrentSetpoint_read)
        else:
            attr.set_quality(PyTango.AttrQuality.ATTR_INVALID)
        #----- PROTECTED REGION END -----#	//	Danfysik.CurrentSetpoint_read
        
    def write_CurrentSetpoint(self, attr):
        self.debug_stream("In write_CurrentSetpoint()")
        data=attr.get_write_value()
        #----- PROTECTED REGION ID(Danfysik.CurrentSetpoint_write) ENABLED START -----#
        self.attr_CurrentSetpoint_write = attr.get_write_value()*CURRENT_SETPOINT_FACTOR
        self.dp.DevSerWriteString('DA 0 '+str(self.attr_CurrentSetpoint_write)+'\r')
        self.waiting=threading.Event()
        self.waiting.wait(0.1) 
        res = self.dp.DevSerReadRaw().strip('\n\r')
        if not self._IsAnswerError(res):
            self.push_change_event("CurrentSetpoint", self.attr_CurrentSetpoint_write)
        #----- PROTECTED REGION END -----#	//	Danfysik.CurrentSetpoint_write
        
    def is_CurrentSetpoint_allowed(self, attr):
        self.debug_stream("In is_CurrentSetpoint_allowed()")
        state_ok = not(self.get_state() in [PyTango.DevState.INIT])
        #----- PROTECTED REGION ID(Danfysik.is_CurrentSetpoint_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Danfysik.is_CurrentSetpoint_allowed
        return state_ok
        
    def read_Voltage(self, attr):
        self.debug_stream("In read_Voltage()")
        #----- PROTECTED REGION ID(Danfysik.Voltage_read) ENABLED START -----#
        self.dp.DevSerWriteString('AD %d\r'%VOLTAGE_READBACK_REGISTER_AD)
        self.waiting=threading.Event()
        self.waiting.wait(0.1) 
        res = self.dp.DevSerReadRaw().strip('\n\r')
        if not self._IsAnswerError(res):
            self.attr_Voltage_read = float(res)/VOLTAGE_READBACK_FACTOR
            attr.set_value(self.attr_Voltage_read)
        else:
            attr.set_quality(PyTango.AttrQuality.ATTR_INVALID)
        #----- PROTECTED REGION END -----#	//	Danfysik.Voltage_read
        
    def is_Voltage_allowed(self, attr):
        self.debug_stream("In is_Voltage_allowed()")
        state_ok = not(self.get_state() in [PyTango.DevState.INIT])
        #----- PROTECTED REGION ID(Danfysik.is_Voltage_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Danfysik.is_Voltage_allowed
        return state_ok
        
    def read_CurrentSlewrate(self, attr):
        self.debug_stream("In read_CurrentSlewrate()")
        #----- PROTECTED REGION ID(Danfysik.CurrentSlewrate_read) ENABLED START -----#
        self.dp.DevSerWriteString('DA 1\r')
        self.waiting=threading.Event()
        self.waiting.wait(0.1) 
        res = self.dp.DevSerReadRaw().strip('\n\r')
        if not self._IsAnswerError(res):
            self.v = int(res.split(' ')[1])
            self.attr_CurrentSlewrate_read = float(self.v)/1000
            attr.set_value(self.attr_CurrentSlewrate_read)
        else:
            attr.set_quality(PyTango.AttrQuality.ATTR_INVALID)
        #----- PROTECTED REGION END -----#	//	Danfysik.CurrentSlewrate_read
        
    def write_CurrentSlewrate(self, attr):
        self.debug_stream("In write_CurrentSlewrate()")
        data=attr.get_write_value()
        #----- PROTECTED REGION ID(Danfysik.CurrentSlewrate_write) ENABLED START -----#
        self.attr_CurrentSlewrate_write = attr.get_write_value()*1000
        self.dp.DevSerWriteString('DA 1 '+str(self.attr_CurrentSlewrate_write)+'\r')
        self.waiting=threading.Event()
        self.waiting.wait(0.1) 
        res = self.dp.DevSerReadRaw().strip('\n\r')
        if not self._IsAnswerError(res):
            self.push_change_event("CurrentSlewrate", self.attr_CurrentSlewrate_write)
        #----- PROTECTED REGION END -----#	//	Danfysik.CurrentSlewrate_write
        
    def is_CurrentSlewrate_allowed(self, attr):
        self.debug_stream("In is_CurrentSlewrate_allowed()")
        state_ok = not(self.get_state() in [PyTango.DevState.INIT])
        #----- PROTECTED REGION ID(Danfysik.is_CurrentSlewrate_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Danfysik.is_CurrentSlewrate_allowed
        return state_ok
        
    def read_AmbientTemperature(self, attr):
        self.debug_stream("In read_AmbientTemperature()")
        #----- PROTECTED REGION ID(Danfysik.AmbientTemperature_read) ENABLED START -----#
        attr.set_value(self.attr_AmbientTemperature_read)
        
        self.dp.DevSerWriteString('AD %d\r'%AMBIENT_TEMPERATURE_REGISTER_AD)
        self.waiting=threading.Event()
        self.waiting.wait(0.1) 
        res = self.dp.DevSerReadRaw().strip('\n\r')
        if not self._IsAnswerError(res):
            self.attr_AmbientTemperature_read = float(res)/AMBIENT_TEMPERATURE_FACTOR
            attr.set_value(self.attr_AmbientTemperature_read)
        else:
            attr.set_quality(PyTango.AttrQuality.ATTR_INVALID)
        #----- PROTECTED REGION END -----#	//	Danfysik.AmbientTemperature_read
        
    def is_AmbientTemperature_allowed(self, attr):
        self.debug_stream("In is_AmbientTemperature_allowed()")
        state_ok = not(self.get_state() in [PyTango.DevState.INIT])
        #----- PROTECTED REGION ID(Danfysik.is_AmbientTemperature_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Danfysik.is_AmbientTemperature_allowed
        return state_ok
        
    def read_StateCode64(self, attr):
        self.debug_stream("In read_StateCode64()")
        #----- PROTECTED REGION ID(Danfysik.StateCode64_read) ENABLED START -----#
        if self.get_state() == PyTango.DevState.FAULT and self.dp == None:
            #TODO: distinguish between communication fault and PS fault
            if attr != None:
                attr.set_quality(PyTango.AttrQuality.ATTR_INVALID)
            return

        self.dp.DevSerWriteString('S1\r')
        self.waiting=threading.Event()
        self.waiting.wait(0.1) 
        res = self.dp.DevSerReadRaw().strip('\n\r')
        if not self._IsAnswerError(res):
            temp=[]
            for i in range(len(res)):
                if res[i]=='!': temp.append('1')
                elif res[i]=='.': temp.append('0')
                else:
                    self.error_stream("Serial line status answer has an "\
                                      "invalid character '%s' in position %d"
                                      %(res[i],i))
            stateCode64_bitstr = ''.join(temp)
            try:
                self.attr_StateCode64_read = int('0b'+stateCode64_bitstr,2)
            except:
                self.attr_StateCode64_read = 0
            self.debug_stream("StateCode64 %s = 0b%s = %d"%(res,stateCode64_bitstr,
                                                            self.attr_StateCode64_read))
            
            if attr==None:
                return self.attr_StateCode64_read
            else:
                attr.set_value(self.attr_StateCode64_read)
        elif attr==None:
            return None
        else:
            attr.set_quality(PyTango.AttrQuality.ATTR_INVALID)
        #----- PROTECTED REGION END -----#	//	Danfysik.StateCode64_read
        
    def read_RemoteMode(self, attr):
        self.debug_stream("In read_RemoteMode()")
        #----- PROTECTED REGION ID(Danfysik.RemoteMode_read) ENABLED START -----#
        attr.set_value(self.attr_RemoteMode_read)
        if self.attr_RemoteMode_read == None:
            attr.set_quality(PyTango.AttrQuality.ATTR_INVALID)
        else:
            attr.set_value(self.attr_RemoteMode_read)
        #----- PROTECTED REGION END -----#	//	Danfysik.RemoteMode_read
        
    def write_RemoteMode(self, attr):
        self.debug_stream("In write_RemoteMode()")
        data=attr.get_write_value()
        #----- PROTECTED REGION ID(Danfysik.RemoteMode_write) ENABLED START -----#
        self.attr_RemoteMode_write = attr.get_write_value()
        if self.attr_RemoteMode_write == True:
            self.Remote='REM '
        else:
            self.Remote='LOC '
        self.dp.DevSerWriteString(str(self.Remote)+'\r')
        self.waiting=threading.Event()
        self.waiting.wait(0.1) 
        res = self.dp.DevSerReadRaw().strip('\n\r')
        if not self._IsAnswerError(res):
            self.push_change_event("RemoteMode", self.attr_RemoteMode_write)
        #----- PROTECTED REGION END -----#	//	Danfysik.RemoteMode_write
        
    def is_RemoteMode_allowed(self, attr):
        self.debug_stream("In is_RemoteMode_allowed()")
        state_ok = not(self.get_state() in [PyTango.DevState.INIT])
        #----- PROTECTED REGION ID(Danfysik.is_RemoteMode_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Danfysik.is_RemoteMode_allowed
        return state_ok
        
    def read_Errors(self, attr):
        self.debug_stream("In read_Errors()")
        #----- PROTECTED REGION ID(Danfysik.Errors_read) ENABLED START -----#
        attr.set_value(self.attr_Errors_read,len(self.attr_Errors_read))
        #----- PROTECTED REGION END -----#	//	Danfysik.Errors_read
        
    
    
        #----- PROTECTED REGION ID(Danfysik.initialize_dynamic_attributes) ENABLED START -----#
    def initialize_dynamic_attributes(self):
        pass
        #----- PROTECTED REGION END -----#	//	Danfysik.initialize_dynamic_attributes
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(Danfysik.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Danfysik.read_attr_hardware


    #-----------------------------------------------------------------------------
    #    Danfysik command methods
    #-----------------------------------------------------------------------------
    
    def Off(self):
        """ 
        
        :param : 
        :type: PyTango.DevVoid
        :return: 
        :rtype: PyTango.DevVoid """
        self.debug_stream("In Off()")
        #----- PROTECTED REGION ID(Danfysik.Off) ENABLED START -----#
        self.dp.DevSerWriteString('F\r')
        #----- PROTECTED REGION END -----#	//	Danfysik.Off
        
    def On(self):
        """ 
        
        :param : 
        :type: PyTango.DevVoid
        :return: 
        :rtype: PyTango.DevVoid """
        self.debug_stream("In On()")
        #----- PROTECTED REGION ID(Danfysik.On) ENABLED START -----#
        self.dp.DevSerWriteString('N\r')
        #----- PROTECTED REGION END -----#	//	Danfysik.On
        
    def ResetInterlocks(self):
        """ 
        
        :param : 
        :type: PyTango.DevVoid
        :return: 
        :rtype: PyTango.DevVoid """
        self.debug_stream("In ResetInterlocks()")
        #----- PROTECTED REGION ID(Danfysik.ResetInterlocks) ENABLED START -----#
        self.dp.DevSerWriteString('RS\r')
        self.cleanAllImportantLogs()
        #----- PROTECTED REGION END -----#	//	Danfysik.ResetInterlocks
        
    def UpdateStatus(self):
        """ 
        
        :param : 
        :type: PyTango.DevVoid
        :return: 
        :rtype: PyTango.DevVoid """
        self.debug_stream("In UpdateStatus()")
        #----- PROTECTED REGION ID(Danfysik.UpdateStatus) ENABLED START -----#
        if self.dp == None:
            self._linkSerial()
            self.warn_stream("Trying to relink with the serial port.")
            return

        #FIXME: this can be improved without use string conversion!
        try:
#            status = []
            self.attr_Errors_read = []
            stateCode64 = self.read_StateCode64(None)
            if stateCode64 == None:
                self.statusString = ''
            else:
                self.statusString = bin(stateCode64)[2:]#remove the '0b' header
                while len(self.statusString) < len(self.statusDict):
                    self.statusString = '0'+self.statusString
            #start with the interpretation of the first bit of the state
            if self.statusString == '':
                self.cleanAllImportantLogs()
                self.changeState(PyTango.DevState.FAULT)
                self.addStatusMsg("Serial line is not responding",True)
            elif len(self.statusString) > 0 and self.statusString[0] == '0':
                #self.attr_Errors_read.append(self.statusDict[0][0]+' : '
                #                             +self.statusDict[0][1][1]+'.')
                #adjusting state of the device is necessary
                if self.get_state() == PyTango.DevState.OFF:
                    self.changeState(PyTango.DevState.ON)
                    self.cleanAllImportantLogs()
            else:
                self.attr_Errors_read.append(self.statusDict[0][0]+' : '
                                             +self.statusDict[0][1][0]+'.')
                if self.get_state() == PyTango.DevState.ON:
                    self.changeState(PyTango.DevState.OFF)
                    self.cleanAllImportantLogs()
            #when first element processed, proceed with the next ones
            for i in range(1, len(self.statusString)):
                if i in [0, 3, 8, 13, 15, 23]:
                    continue#avoid this positions, are unused
                if i in [1,2,5,6]:
                    continue#avoid this positions, they are not errors
                if self.statusString[i]=='1':
                    self.attr_Errors_read.append(self.statusDict[i][0]+' : '
                                                 +self.statusDict[i][1][0]+'.')
            #recollect the messaging
            if len(self.attr_Errors_read) > 0:
                self.push_change_event('Errors',self.attr_Errors_read)

            mode = self.isRemoteMode()
            if not mode == self.attr_RemoteMode_read:
                self.self.attr_RemoteMode_read = mode
                self.push_change_event('RemoteMode',self.attr_RemoteMode_read)
        except:
            self.error_stream('UpdateStatus() method failed!: %s' % (traceback.format_exc()))
        #----- PROTECTED REGION END -----#	//	Danfysik.UpdateStatus
        
    def ReadAD(self, argin):
        """ 
        
        :param argin: 
        :type: PyTango.DevShort
        :return: 
        :rtype: PyTango.DevString """
        self.debug_stream("In ReadAD()")
        argout = ''
        #----- PROTECTED REGION ID(Danfysik.ReadAD) ENABLED START -----#
        self.dp.DevSerWriteString('AD %d\r'%int(argin))
        self.waiting=threading.Event()
        self.waiting.wait(0.1) 
        res = self.dp.DevSerReadRaw().strip('\n\r')
        if not self._IsAnswerError(res):
            argout = res
        else:
            argout = "None"
        #----- PROTECTED REGION END -----#	//	Danfysik.ReadAD
        return argout
        

class DanfysikClass(PyTango.DeviceClass):
    #--------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(Danfysik.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	Danfysik.global_class_variables

    def dyn_attr(self, dev_list):
        """Invoked to create dynamic attributes for the given devices.
        Default implementation calls
        :meth:`Danfysik.initialize_dynamic_attributes` for each device
    
        :param dev_list: list of devices
        :type dev_list: :class:`PyTango.DeviceImpl`"""
    
        for dev in dev_list:
            try:
                dev.initialize_dynamic_attributes()
            except:
                import traceback
                dev.warn_stream("Failed to initialize dynamic attributes")
                dev.debug_stream("Details: " + traceback.format_exc())
        #----- PROTECTED REGION ID(Danfysik.dyn_attr) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Danfysik.dyn_attr

    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'SerialLine':
            [PyTango.DevString,
            "The serial line to be used",
            [] ],
        }


    #    Command definitions
    cmd_list = {
        'Off':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'On':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'ResetInterlocks':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'UpdateStatus':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'ReadAD':
            [[PyTango.DevShort, "none"],
            [PyTango.DevString, "none"]],
        }


    #    Attribute definitions
    attr_list = {
        'Current':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit': "'A'",
            } ],
        'CurrentSetpoint':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit': "'A'",
            } ],
        'Voltage':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit': "'V'",
            } ],
        'CurrentSlewrate':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit': "'A/s'",
            } ],
        'AmbientTemperature':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit': "'Celsius'",
            } ],
        'StateCode64':
            [[PyTango.DevLong64,
            PyTango.SCALAR,
            PyTango.READ]],
        'RemoteMode':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'Errors':
            [[PyTango.DevString,
            PyTango.SPECTRUM,
            PyTango.READ, 32]],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(DanfysikClass,Danfysik,'Danfysik')

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed,e:
        print '-------> Received a DevFailed exception:',e
    except Exception,e:
        print '-------> An unforeseen exception occured....',e

if __name__ == '__main__':
    main()
